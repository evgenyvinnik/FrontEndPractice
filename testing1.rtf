{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red173\green130\blue70;\red22\green28\blue36;\red202\green202\blue202;
\red252\green104\blue111;\red224\green224\blue224;\red149\green184\blue79;\red167\green161\blue230;\red70\green137\blue204;
\red254\green187\blue91;}
{\*\expandedcolortbl;;\cssrgb\c73725\c58039\c34510;\cssrgb\c11373\c14902\c18824;\cssrgb\c83137\c83137\c83137;
\cssrgb\c100000\c50196\c50980;\cssrgb\c90196\c90196\c90196;\cssrgb\c64706\c76078\c38039;\cssrgb\c71373\c70196\c92157;\cssrgb\c33725\c61176\c83922;
\cssrgb\c100000\c77647\c42745;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl420\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 /*\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 You did an amazing job on the interview! You\'92re hired! It\'92s your first day at reddit! Turns out Reddit users don\'92t like deeply nested comments. Our product manager told us to come up with a new view to break out comments deeper than 5 levels of nesting. Given a list of (node id, parent id) pairs that define a comment tree, write a function simple_comment_view that returns all the root node ids for comment trees nested 5 in depth.\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 Return all root nodes and all those five levels deep.\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 /*\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ( 1 ) <== first top level comment\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    \\\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2   ( 2 ) < first and only reply to ( 1 )\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2      \\\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2     ( 3 )\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2        \\\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2       ( 4 )\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2          \\\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2          ( 5 ) < reply to ( 4 )\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2          \\\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2          ( 6 ) < reply to ( 4 )\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2             \\     \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2            ( 7 ) <== five levels deep\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2               \\\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2              ( 8 )\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ( 9 ) <== second top level comment\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 Output: [1, 7, 9]\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 const inputNodes = [\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // [node id, parent id]\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2   [8, 7],\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2   [7, 6],\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2   [6, 4],\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2   [5, 4],\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2   [4, 3],\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2   [3, 2],\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2   [2, 1],\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2   [1, null],\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2   [9, null],\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ]\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 const simpleCommentView = inputNodes => \{\}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 */\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 #pragma\cf6 \strokec6  \cf7 \strokec7 warning\cf6 \strokec6  \cf7 \strokec7 disable\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 .\cf7 \strokec7 IO\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 .\cf7 \strokec7 CodeDom\cf6 \strokec6 .\cf7 \strokec7 Compiler\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 .\cf7 \strokec7 Collections\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 .\cf7 \strokec7 Collections\cf6 \strokec6 .\cf7 \strokec7 Generic\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 .\cf7 \strokec7 ComponentModel\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 .\cf7 \strokec7 Diagnostics\cf6 \strokec6 .\cf7 \strokec7 CodeAnalysis\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 .\cf7 \strokec7 Globalization\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 .\cf7 \strokec7 Net\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 .\cf7 \strokec7 Net\cf6 \strokec6 .\cf7 \strokec7 Http\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 .\cf7 \strokec7 Reflection\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 .\cf7 \strokec7 Runtime\cf6 \strokec6 .\cf7 \strokec7 Serialization\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 .\cf7 \strokec7 Text\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 .\cf7 \strokec7 Web\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 .\cf7 \strokec7 Linq\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 .\cf7 \strokec7 Text\cf6 \strokec6 .\cf7 \strokec7 RegularExpressions\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 System\cf6 \strokec6 .\cf7 \strokec7 Threading\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 MySql\cf6 \strokec6 .\cf7 \strokec7 Data\cf6 \strokec6 .\cf7 \strokec7 MySqlClient\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 using\cf6 \strokec6  \cf7 \strokec7 Newtonsoft\cf6 \strokec6 .\cf7 \strokec7 Json\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 public\cf6 \strokec6  \cf5 \strokec5 class\cf6 \strokec6  \cf7 \strokec7 Solution\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf6 \cb3 \strokec6 \{\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     \cf5 \strokec5 public\cf6 \strokec6  \cf5 \strokec5 static\cf6 \strokec6  \cf5 \strokec5 void\cf6 \strokec6  \cf7 \strokec7 Main\cf6 \strokec6 ()\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     \{\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf5 \strokec5 var\cf6 \strokec6  \cf7 \strokec7 inputNodes\cf6 \strokec6  = \cf5 \strokec5 new\cf6 \strokec6  \cf7 \strokec7 List\cf6 \strokec6 <\cf7 \strokec7 List\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?>> ();\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf7 \strokec7 inputNodes\cf6 \strokec6 .\cf7 \strokec7 Add\cf6 \strokec6 (\cf5 \strokec5 new\cf6 \strokec6  \cf7 \strokec7 List\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?> \{\cf8 \strokec8 8\cf6 \strokec6 , \cf8 \strokec8 7\cf6 \strokec6 \});\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf7 \strokec7 inputNodes\cf6 \strokec6 .\cf7 \strokec7 Add\cf6 \strokec6 (\cf5 \strokec5 new\cf6 \strokec6  \cf7 \strokec7 List\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?> \{\cf8 \strokec8 7\cf6 \strokec6 , \cf8 \strokec8 6\cf6 \strokec6 \});\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf7 \strokec7 inputNodes\cf6 \strokec6 .\cf7 \strokec7 Add\cf6 \strokec6 (\cf5 \strokec5 new\cf6 \strokec6  \cf7 \strokec7 List\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?> \{\cf8 \strokec8 6\cf6 \strokec6 , \cf8 \strokec8 4\cf6 \strokec6 \});\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf7 \strokec7 inputNodes\cf6 \strokec6 .\cf7 \strokec7 Add\cf6 \strokec6 (\cf5 \strokec5 new\cf6 \strokec6  \cf7 \strokec7 List\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?> \{\cf8 \strokec8 5\cf6 \strokec6 , \cf8 \strokec8 4\cf6 \strokec6 \});\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf7 \strokec7 inputNodes\cf6 \strokec6 .\cf7 \strokec7 Add\cf6 \strokec6 (\cf5 \strokec5 new\cf6 \strokec6  \cf7 \strokec7 List\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?> \{\cf8 \strokec8 4\cf6 \strokec6 , \cf8 \strokec8 3\cf6 \strokec6 \});\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf7 \strokec7 inputNodes\cf6 \strokec6 .\cf7 \strokec7 Add\cf6 \strokec6 (\cf5 \strokec5 new\cf6 \strokec6  \cf7 \strokec7 List\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?> \{\cf8 \strokec8 3\cf6 \strokec6 , \cf8 \strokec8 2\cf6 \strokec6 \});\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf7 \strokec7 inputNodes\cf6 \strokec6 .\cf7 \strokec7 Add\cf6 \strokec6 (\cf5 \strokec5 new\cf6 \strokec6  \cf7 \strokec7 List\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?> \{\cf8 \strokec8 2\cf6 \strokec6 , \cf8 \strokec8 1\cf6 \strokec6 \});\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf7 \strokec7 inputNodes\cf6 \strokec6 .\cf7 \strokec7 Add\cf6 \strokec6 (\cf5 \strokec5 new\cf6 \strokec6  \cf7 \strokec7 List\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?> \{\cf8 \strokec8 1\cf6 \strokec6 , \cf9 \strokec9 null\cf6 \strokec6 \});\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf7 \strokec7 inputNodes\cf6 \strokec6 .\cf7 \strokec7 Add\cf6 \strokec6 (\cf5 \strokec5 new\cf6 \strokec6  \cf7 \strokec7 List\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?> \{\cf8 \strokec8 9\cf6 \strokec6 , \cf9 \strokec9 null\cf6 \strokec6 \});\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 //   \{7, 6\},\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //   \{6, 4\},\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //  \{5, 4\},\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //   \{4, 3\},\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //   \{3, 2\},\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //   \{2, 1\},\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //   \{1, null\},\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //   \{9, null\},\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf6 \cb3 \strokec6         \cf5 \strokec5 var\cf6 \strokec6  \cf7 \strokec7 rootAndFith\cf6 \strokec6  = \cf7 \strokec7 simple_comment_view\cf6 \strokec6 (\cf7 \strokec7 inputNodes\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf5 \strokec5 foreach\cf6 \strokec6 (\cf5 \strokec5 var\cf6 \strokec6  \cf7 \strokec7 entry\cf6 \strokec6  \cf5 \strokec5 in\cf6 \strokec6  \cf7 \strokec7 rootAndFith\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             \cf7 \strokec7 Console\cf6 \strokec6 .\cf7 \strokec7 WriteLine\cf6 \strokec6 (\cf10 \strokec10 "entry "\cf6 \strokec6  + \cf7 \strokec7 entry\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     \}\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     \cf5 \strokec5 private\cf6 \strokec6  \cf5 \strokec5 static\cf6 \strokec6  \cf7 \strokec7 List\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?> \cf7 \strokec7 simple_comment_view\cf6 \strokec6 (\cf7 \strokec7 List\cf6 \strokec6 <\cf7 \strokec7 List\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?>> \cf7 \strokec7 inputNodes\cf6 \strokec6 ) \{\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf2 \strokec2 // foreach(var entry in inputNodes)\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf2 \strokec2 //     Console.WriteLine("entry " + entry[0] + " " + entry[1]);\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf5 \strokec5 var\cf6 \strokec6  \cf7 \strokec7 comments\cf6 \strokec6  = \cf5 \strokec5 new\cf6 \strokec6  \cf7 \strokec7 Dictionary\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?, \cf5 \strokec5 int\cf6 \strokec6 ?>();\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf5 \strokec5 var\cf6 \strokec6  \cf7 \strokec7 commentsDepth\cf6 \strokec6  = \cf5 \strokec5 new\cf6 \strokec6  \cf7 \strokec7 Dictionary\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?, \cf5 \strokec5 int\cf6 \strokec6 ?>();\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf5 \strokec5 var\cf6 \strokec6  \cf7 \strokec7 rootAndFith\cf6 \strokec6  = \cf5 \strokec5 new\cf6 \strokec6  \cf7 \strokec7 List\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?>();\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf5 \strokec5 foreach\cf6 \strokec6 (\cf5 \strokec5 var\cf6 \strokec6  \cf7 \strokec7 entry\cf6 \strokec6  \cf5 \strokec5 in\cf6 \strokec6  \cf7 \strokec7 inputNodes\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             \cf7 \strokec7 comments\cf6 \strokec6 .\cf7 \strokec7 Add\cf6 \strokec6 (\cf7 \strokec7 entry\cf6 \strokec6 [\cf8 \strokec8 0\cf6 \strokec6 ], \cf7 \strokec7 entry\cf6 \strokec6 [\cf8 \strokec8 1\cf6 \strokec6 ]);\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf5 \strokec5 foreach\cf6 \strokec6 (\cf5 \strokec5 var\cf6 \strokec6  \cf7 \strokec7 entry\cf6 \strokec6  \cf5 \strokec5 in\cf6 \strokec6  \cf7 \strokec7 comments\cf6 \strokec6 .\cf7 \strokec7 Keys\cf6 \strokec6 ) \{\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             \cf5 \strokec5 var\cf6 \strokec6  \cf7 \strokec7 depth\cf6 \strokec6  = \cf7 \strokec7 calculateDepth\cf6 \strokec6 (\cf7 \strokec7 entry\cf6 \strokec6 , \cf7 \strokec7 comments\cf6 \strokec6 , \cf7 \strokec7 commentsDepth\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             \cf7 \strokec7 commentsDepth\cf6 \strokec6 .\cf7 \strokec7 Add\cf6 \strokec6 (\cf7 \strokec7 entry\cf6 \strokec6 , \cf7 \strokec7 depth\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             \cf2 \strokec2 // Console.WriteLine("calculateDepth " +entry + " depth " + depth);\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             \cf5 \strokec5 if\cf6 \strokec6  (\cf7 \strokec7 depth\cf6 \strokec6  == \cf8 \strokec8 0\cf6 \strokec6  || \cf7 \strokec7 depth\cf6 \strokec6  == \cf8 \strokec8 5\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             \{\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                 \cf7 \strokec7 rootAndFith\cf6 \strokec6 .\cf7 \strokec7 Add\cf6 \strokec6 (\cf7 \strokec7 entry\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             \}\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \}\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf2 \strokec2 //Console.WriteLine("rootAndFith " +rootAndFith.Count);\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf5 \strokec5 return\cf6 \strokec6  \cf7 \strokec7 rootAndFith\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     \}\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     \cf5 \strokec5 private\cf6 \strokec6  \cf5 \strokec5 static\cf6 \strokec6  \cf5 \strokec5 int\cf6 \strokec6 ? \cf7 \strokec7 calculateDepth\cf6 \strokec6 (\cf5 \strokec5 int\cf6 \strokec6 ? \cf7 \strokec7 commentId\cf6 \strokec6 , \cf7 \strokec7 Dictionary\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?, \cf5 \strokec5 int\cf6 \strokec6 ?> \cf7 \strokec7 comments\cf6 \strokec6 , \cf7 \strokec7 Dictionary\cf6 \strokec6 <\cf5 \strokec5 int\cf6 \strokec6 ?, \cf5 \strokec5 int\cf6 \strokec6 ?> \cf7 \strokec7 commentsDepth\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     \{\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf2 \strokec2 //Console.WriteLine("calculateDepth " +commentId);\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf5 \strokec5 int\cf6 \strokec6 ? \cf7 \strokec7 depth\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf5 \strokec5 if\cf6 \strokec6 (\cf7 \strokec7 comments\cf6 \strokec6 [\cf7 \strokec7 commentId\cf6 \strokec6 ] == \cf9 \strokec9 null\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \{\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             \cf7 \strokec7 depth\cf6 \strokec6  = \cf8 \strokec8 0\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \} \cf5 \strokec5 else\cf6 \strokec6  \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \{\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             \cf7 \strokec7 depth\cf6 \strokec6  = \cf7 \strokec7 calculateDepth\cf6 \strokec6 (\cf7 \strokec7 comments\cf6 \strokec6 [\cf7 \strokec7 commentId\cf6 \strokec6 ], \cf7 \strokec7 comments\cf6 \strokec6 , \cf7 \strokec7 commentsDepth\cf6 \strokec6  ) + \cf8 \strokec8 1\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \}\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6        \cf2 \strokec2 // Console.WriteLine("depth " +depth);\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf5 \strokec5 return\cf6 \strokec6  \cf7 \strokec7 depth\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     \}\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
}