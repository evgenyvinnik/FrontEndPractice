{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //[1, [2, 4], [3, [5]]] => Depth sum: 1*1 + 2*2 + 4*2 + 3*2 + 5*3 = 34\
    \
\
function recursiveNestedArrayProduct(entryArray, level)\
\{\
  //1 round: entryArray = [1, [2, 4], [3, [5]]]\
  //1 round: level = 1\
  //2 round: entryArray = [2, 4]\
  //2 round: level = 2;\
  //3 round: entryArray =[3, [5]]\
  //3 round: level = 2;\
  //4 round: entryArray =[5]\
  //4 round: level = 3;\
  let arrayProduct = 0;\
  for(let i = 0; i < entryArray.length; i++) \{\
    // length returns 3\
    // i = 0, entryArray[0] = 1\
    // i = 1, entryArray[1] = [2, 4]\
    // i = 2, entryArray[2] = [3, [5]]\
    \
    // length returns 2\
    // i = 0, entryArray[0] = 2\
    // i = 1, entryArray[0] = 4\
    \
    // lenght returns 2\
    // i = 0, entryArray[0] = 3\
    // i = 1, entryArray[1] = [5]\
    \
    // lenght returns 1\
    // i = 0, entryArray[0] = 5\
    if(Array.isArray(entryArray[i])) \{\
      //[2, 4] -> true\
      arrayProduct += recursiveNestedArrayProduct(entryArray[i], level + 1);\
      // arrayProduct = 1 + 12 == 13\
      \
      // arrayProduct = 21;\
      \
      // arrayProduct = 13 + 21 = 34\
    \} else \{\
      arrayProduct += entryArray[i] * level;\
      // arrayProduct = 1\
      \
      // arrayProduct = 4\
      // arrayProduct = 12\
      \
      // arrayProduct = 6\
      \
      // arrayProduct = 15 \
    \}\
  \}\
  return arrayProduct;\
  // return arrayProduct = 12;\
  \
  // return arrayProduct = 15;\
  \
  // return arrayProduct = 34;\
\}\
\
function nestedArrayProduct(entryArray) \{\
  let arrayProduct = 0;\
  let level = 1;\
  arrayProduct = recursiveNestedArrayProduct(entryArray, level);// [1, [2, 4], [3, [5]]]\
  // arrayProduct = 34\
  return arrayProduct;\
\}\
\
// [1, [2, [3]]]\
\
//O(N)\
//O(N)\
\
\
//"(a(b))" => "(a(b))"\
//"(a" => "a"\
//'a)' => "a"\
\
function bracketBalancer(expression) \{\
  let listBrackets = [];\
    let splitExpression = expression.split('');\
  for(let i = 0; i < splitExpression.length; i++)\
  \{\
    if (splitExpression[i] === '(')\
    \{\
      listBrackets.push(['(', i]);\
    \} else if (splitExpression[i] === ')') \{\
      if(listBrackets.length > 0) \{\
        if(listBrackets[listBrackets.length-1][0] === '(') \}\
            listBrackets.pop()\
        \} else  \{\
          listBrackets.push([')', i]);\
        \}\
      \}\
    \}\
  \}\
\
\
  for(let i = listBrackets.length-1; i >= 0; i++) \{\
    splitExpression.removeAt(listBrackets[i][1];\
  \}\
  \
  \
  return splitExpression.join('');\
\}\
// O(N)\
// O(N)}